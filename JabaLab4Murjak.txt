import javax.lang.model.element.NestingKind;
import java.io.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.*;

public class Main {
    static Scanner scanner = new Scanner(System.in);
    static String fileName = "file.txt";
    static int indexList = 1;
    static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));

    abstract static class Doctor {
        String surname;
        int experience;

        abstract void averageVisitors();
        abstract void longerComment();
        abstract void minVisitor();

    }

    public static class Visit extends Doctor {
        Date date;
        int visitors;
        String comment;

        @Override
        public void longerComment() {
            int index = 0;
            for(int i = 0; i < visitInfo.size();i++)
            {
                if(visitInfo.get(index).comment.length() < visitInfo.get(i).comment.length()) index = i;
            }
            System.out.println("Найдовший коментар: " + visitInfo.get(index).comment);
        }

        public void averageVisitors() {
            int sum = 0;
            for(Visit tmpVisit : visitInfo)
            {
                sum += tmpVisit.visitors;
            }

            System.out.println("Середня к-сть відвідувачів: " + (sum/(visitInfo.size())));
        }

        public void minVisitor() {
            int min = 0;
            for(int i = 0; i < visitInfo.size();i++)
            {
                if(visitInfo.get(min).visitors > visitInfo.get(i).visitors) min = i;
            }
            System.out.println("Мінімальна к-сть відвідувачів: " + visitInfo.get(min).visitors);
        }

        public void AddNewData() {
            int day, month;
            do {
                System.out.print("Введіть номер місяця: ");
                month = scanner.nextByte();
            } while (month > 12 || month < 1);
            Calendar calendar = new GregorianCalendar(LocalDate.now().getYear(), month - 1, 1);
            do {
                System.out.println("Максимум днів:" + calendar.getActualMaximum(calendar.DAY_OF_MONTH));
                System.out.print("Введіть день: ");
                day = scanner.nextByte();

            } while (day > calendar.getActualMaximum(calendar.DAY_OF_MONTH) || day < 1);
            calendar = new GregorianCalendar(LocalDate.now().getYear(), month - 1, day);
            date = calendar.getTime();
            try {
                FileOutputStream fos = new FileOutputStream(fileName, true);
                DataOutputStream dos = new DataOutputStream(fos);
                System.out.print("Введіть прізвище: ");
                surname = scanner.nextLine();
                surname = scanner.nextLine();
                System.out.print("Введіть стаж: ");
                experience = scanner.nextByte();
                System.out.print("Введіть к-сть відвідувачів: ");
                visitors = scanner.nextByte();
                System.out.print("Введіть коментар: ");
                comment = scanner.nextLine();
                comment = scanner.nextLine();
                dos.writeUTF(surname);
                dos.write(experience);
                dos.writeUTF(new SimpleDateFormat("dd/MM/y", Locale.ENGLISH).format(date.getTime()));
                dos.write(visitors);
                dos.writeUTF(comment);
                dos.close();
                visitInfo.add(this);
            } catch (IOException e) {
                System.out.println("Error");
            }
        }

        public void EditData() {
            byte lineIndex;
            do {
                do {
                    System.out.print("Введіть поле дял редагування\n(1.Прізвище | 2.Стаж | 3.Дата | 4.К-сть відвідувачів | 5.Коментар)\n(6.Назад в меню)\nВведіть індекс:");
                    lineIndex = scanner.nextByte();
                } while (lineIndex < 1 || lineIndex > 6);
                switch (lineIndex) {
                    case 1: {
                        System.out.print("Введіть прізвище: ");
                        surname = scanner.nextLine();
                        surname = scanner.nextLine();
                    }

                    case 2: {
                        System.out.print("Введіть cтаж: ");
                        experience = scanner.nextByte();
                    }

                    break;
                    case 3: {
                        byte day;
                        byte month;
                        do {
                            System.out.print("Введіть номер місяця: ");
                            month = scanner.nextByte();
                        } while (month > 12 || month < 1);
                        Calendar calendar = new GregorianCalendar(LocalDate.now().getYear(), month - 1, 1);
                        do {
                            System.out.println("Максимум днів:" + calendar.getActualMaximum(calendar.DAY_OF_MONTH));
                            System.out.print("Введіть день: ");
                            day = scanner.nextByte();

                        } while (day > calendar.getActualMaximum(calendar.DAY_OF_MONTH) || day < 1);
                        calendar = new GregorianCalendar(LocalDate.now().getYear(), month - 1, day);
                        date = calendar.getTime();
                    }

                    break;
                    case 4: {
                        System.out.print("Введіть к-сть відвідувачів: ");
                        visitors = scanner.nextByte();
                    }
                    case 5: {
                        System.out.print("Введіть коментар: ");
                        comment = scanner.nextLine();
                        comment = scanner.nextLine();

                    }
                    break;

                }
            } while (lineIndex != 6);
        }

        public void Show() {
            System.out.println("Прізвище: " + surname + " | Стаж: " + experience + " | Дата: " + new SimpleDateFormat("dd/MM/y", Locale.ENGLISH).format(date.getTime()) + " | К-сть відвідувачів: " + visitors + " |\n Коментар: " + comment);
        }
    }

    static ArrayList<Visit> visitInfo = new ArrayList<Visit>();

    static void LoadFromFile() {
        visitInfo.clear();
        try {
            FileInputStream fis = new FileInputStream(fileName);
            DataInputStream dis = new DataInputStream(fis);
            Visit temp;
            while (dis.available() > 0) {
                temp = new Visit();
                temp.surname = dis.readUTF();
                temp.experience = dis.read();
                try {
                    temp.date = new SimpleDateFormat("dd/MM/y").parse(dis.readUTF());
                } catch (ParseException e) {
                    e.printStackTrace();
                }
                temp.visitors = dis.read();
                temp.comment = dis.readUTF();
                visitInfo.add(temp);
            }
            dis.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        String enterkey;
        LoadFromFile();
        try {
            do {
                System.out.println("Введіть 'р' - редагувати, 'а' - додати, 'в' - вивід, 'с' - середня к-сть відвідувачів, 'м' - прийом з мінімальною к-стю відвідувачів, 'н' - найдовший коментар, 'д' - вилучення, 'е' - вихід");


                enterkey = reader.readLine();


                Visit temp = new Visit();
                switch (enterkey.charAt(0)) {
                    case 'p': {
                        if (visitInfo.isEmpty()) {
                            System.out.println("Список пустий, додайти дані.");
                        } else {
                            System.out.println("Список:");
                            indexList = 1;
                            for (Visit tmpVisit : visitInfo) {
                                System.out.print(indexList + ": ");
                                tmpVisit.Show();
                                indexList++;
                            }
                        }
                        byte index;
                        do {
                            System.out.print("Введіть індекс(" + "from 1 to " + visitInfo.size() + "):");
                            index = scanner.nextByte();
                        } while (index < 1 || index > visitInfo.size());
                        visitInfo.get(index - 1).EditData();
                    }
                    break;
                    case 'в': {
                        if (visitInfo.isEmpty()) {
                            System.out.println("Список пустий, додайте дані.");
                        } else {
                            System.out.println("Список:");
                            indexList = 1;
                            for (Visit tmpVisit : visitInfo) {
                                System.out.print(indexList + ": ");
                                tmpVisit.Show();
                                indexList++;
                            }
                        }
                    }
                    break;
                    case 'а':
                        temp.AddNewData();
                        break;
                    case 'с': {
                        if (visitInfo.isEmpty()) {
                            System.out.println("Список пустий, додайти дані.");
                        } else {
                            visitInfo.get(0).averageVisitors();
                        }
                    }
                    break;
                    case 'н': {
                        if (visitInfo.isEmpty()) {
                            System.out.println("Список пустий, додайти дані.");
                        } else {
                            visitInfo.get(0).longerComment();
                        }
                    }
                    break;
                    case 'м': {
                        if (visitInfo.isEmpty()) {
                            System.out.println("Список пустий, додайти дані.");
                        } else {
                            visitInfo.get(0).minVisitor();
                        }
                    }
                    break;
                    case 'д': {
                        if (visitInfo.isEmpty()) {
                            System.out.println("Список пустий, додайти дані.");
                        } else {
                            System.out.println("Список:");
                            indexList = 1;
                            for (Visit tmpVisit : visitInfo) {
                                System.out.print(indexList + ": ");
                                tmpVisit.Show();
                                indexList++;
                            }
                        }
                        byte index;
                        do {
                            System.out.print("Введіть індекс (" + "from 1 to " + visitInfo.size() + "):");
                            index = scanner.nextByte();
                        } while (index < 1 || index > visitInfo.size());

                        visitInfo.remove(index - 1);
                        try {
                            FileOutputStream tmpfos = new FileOutputStream(fileName);
                            DataOutputStream tmpdos = new DataOutputStream(tmpfos);
                            tmpdos.close();
                            FileOutputStream fos = new FileOutputStream(fileName, true);
                            DataOutputStream dos = new DataOutputStream(fos);
                            for (Visit tmpVisit : visitInfo) {
                            dos.writeUTF(tmpVisit.surname);
                            dos.write(tmpVisit.experience);
                            dos.writeUTF(new SimpleDateFormat("dd/MM/y", Locale.ENGLISH).format(tmpVisit.date.getTime()));
                            dos.write(tmpVisit.visitors);
                            dos.writeUTF(tmpVisit.comment);

                            }
                            dos.close();
                        } catch (IOException e) {
                            System.out.println("Error");
                        }
                    }
                    break;
                }
            }
            while (enterkey.charAt(0) != 'е');

        } catch (
                IOException e) {
            e.printStackTrace();
        }
    }

}